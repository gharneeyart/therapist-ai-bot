import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';
import { getAIResponse } from './src/services/aiService.js';
import { connectDB } from './src/config/db.config.js';
import { addMessageToHistory, getConversationHistory } from './src/controllers/conversationController.js';
dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;

// Basic validation for environment variables
if (!token) {
    console.error("FATAL ERROR: TELEGRAM_BOT_TOKEN is not set in .env file.");
    process.exit(1);
}
if (!process.env.GEMINIAI_API_KEY) {
    console.error("FATAL ERROR: OPENAI_API_KEY is not set in .env file.");
    process.exit(1);
}
if (!process.env.MONGODB_URI) {
    console.error("FATAL ERROR: MONGODB_URI is not set in .env file.");
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

const DISCLAIMER_MESSAGE = `Welcome! I'm an AI designed to offer a supportive space for you to explore your thoughts and feelings.

Important Disclaimer:
- I am an AI, not a human therapist.
- I cannot provide medical advice, diagnoses, or crisis intervention.
- My responses are generated by AI and are for supportive listening and general guidance only. They are not a substitute for professional psychological or medical help.
- For serious mental health concerns, or if you are in crisis or considering self-harm or harming others, please consult a qualified healthcare professional or contact emergency services immediately (e.g., call or text 988 in the US/Canada, or find your local emergency number).
- Your interactions with me are not confidential in the same way as with a human therapist, though we strive to manage data responsibly. Please be mindful of the information you share.

By continuing to use this bot, you acknowledge and accept these limitations.

How can I help you today?`;



async function initializeApp() {
    await connectDB(); // Connect to MongoDB on startup

    bot.onText(/\/start/, (msg) => {
        const chatId = msg.chat.id;
        // Send with parse_mode: "MarkdownV2" (now safe)
        bot.sendMessage(chatId, DISCLAIMER_MESSAGE);
        // Consider clearing history or specific welcome logic here if needed
    });

    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id.toString(); // Unique ID for the user
        const userText = msg.text;

        // Ignore messages that are commands handled by onText (like /start)
        if (userText && userText.startsWith('/')) {
            // If it's not /start, you might want to inform the user or handle other commands
            if (userText.toLowerCase() !== '/start') {
                 // bot.sendMessage(chatId, "Please type your thoughts or feelings. Use /start for the welcome message.");
            }
            return;
        }
        if (typeof userText !== 'string' || !userText.trim()) {
            console.error('Invalid userText:', userText);
            return; // or throw an error
        }

        bot.sendChatAction(chatId, 'typing'); // Show typing indicator

        try {
            // await addMessageToHistory(userId, {
            //     role: 'user',
            //     content: [{ text: userText }]
            // });
            await addMessageToHistory(userId, {
                role: 'user',
                content: userText // ✅ plain string
              });
            
            const conversationHistory = await getConversationHistory(userId);
            
            const aiResponse = await getAIResponse(conversationHistory);
            
            bot.sendMessage(chatId, aiResponse);
            // await addMessageToHistory(userId, {
            //     role: 'model',
            //     content: [{ text: aiResponse }]
            // });
            await addMessageToHistory(userId, {
                role: 'model',
                content: aiResponse // ✅ plain string extracted from array
              });
           
              
              
              
        } catch (error) {
            console.error(`Error processing message for chatID ${chatId} & userID ${userId}:`, error);
            bot.sendMessage(chatId, "I'm sorry, I encountered an unexpected issue. Please try sending your message again.");
        }
    });

    console.log('Therapist AI Bot is running...');
}

initializeApp().catch(console.error);